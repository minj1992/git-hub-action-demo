name: Lambda Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - deploy
          - rotate
        default: "rotate"

      client_name:
        description: "Select the client"
        required: true
        type: choice
        options:
          - client1
          - client2
          - client3
        default: "client1"

      environment:
        description: "Select environment"
        required: true
        type: choice
        options:
          - dev
          - stage
          - prod
        default: "prod"

      secrets_to_rotate:
        description: "Secrets to rotate (comma-separated)"
        required: false
        default: "secret1,secret2"

      exclude_secrets:
        description: "Exclude secrets (comma-separated)"
        required: false
        default: ""

      exclude_keys:
        description: "Exclude keys inside each secret (comma-separated)"
        required: false
        default: ""

jobs:
  deploy:
    if: github.event.inputs.action == 'deploy'
    runs-on: self-hosted
    environment: prod
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Zip Lambda function
        run: Compress-Archive -Path lambda_function.py -DestinationPath function.zip -Force

      - name: Deploy to Lambda
        run: aws lambda update-function-code --function-name value3 --zip-file fileb://function.zip

  rotate:
    if: github.event.inputs.action == 'rotate'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build secrets JSON payload
        id: build
        run: |
          echo "Preparing JSON payload for Lambda..."

          # Inputs
          client="${{ github.event.inputs.client_name }}"
          env="${{ github.event.inputs.environment }}"
          secrets_to_rotate="${{ github.event.inputs.secrets_to_rotate }}"
          exclude_secrets="${{ github.event.inputs.exclude_secrets }}"
          exclude_keys="${{ github.event.inputs.exclude_keys }}"

          # Initialize JSON
          secrets='[]'

          # Convert exclude lists to arrays
          exclude_secret_list=$(echo "$exclude_secrets" | tr ',' '\n' | awk '{$1=$1};1' | jq -R . | jq -s .)
          exclude_key_list=$(echo "$exclude_keys" | tr ',' '\n' | awk '{$1=$1};1' | jq -R . | jq -s .)

          # Iterate through selected secrets
          IFS=',' read -r -a secret_array <<< "$secrets_to_rotate"
          for s in "${secret_array[@]}"; do
            s_trimmed=$(echo "$s" | xargs)
            # Skip excluded secrets
            if echo "$exclude_secrets" | grep -qw "$s_trimmed"; then
              echo "Skipping excluded secret: $s_trimmed"
              continue
            fi

            path="/${client}/${env}/${s_trimmed}"
            secrets=$(echo $secrets | jq --arg p "$path" --argjson e "$exclude_key_list" '. += [{"name": $p, "exclude_keys": $e}]')
          done

          echo "Final JSON payload:"
          echo $secrets | jq '.'

          echo "secrets_payload=$(echo $secrets | jq -c .)" >> $GITHUB_OUTPUT

      - name: Invoke Lambda with secrets payload
        run: |
          echo "Invoking Lambda..."
          jq -n --argjson secrets '${{ steps.build.outputs.secrets_payload }}' '{secrets: $secrets}' > payload.json

          aws lambda invoke \
            --function-name value3 \
            --invocation-type RequestResponse \
            --payload file://payload.json \
            response.json

          echo "Lambda response:"
          cat response.json
